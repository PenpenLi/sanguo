//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: Battle.proto
namespace org.alan.chess.proto
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"Battle")]
  public partial class Battle : global::ProtoBuf.IExtensible
  {
    public Battle() {}
    

    private int _sid = default(int);
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"sid", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int sid
    {
      get { return _sid; }
      set { _sid = value; }
    }

    private string _name = "";
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"name", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string name
    {
      get { return _name; }
      set { _name = value; }
    }

    private int _type = default(int);
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"type", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int type
    {
      get { return _type; }
      set { _type = value; }
    }

    private int _roleNum = default(int);
    [global::ProtoBuf.ProtoMember(4, IsRequired = false, Name=@"roleNum", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int roleNum
    {
      get { return _roleNum; }
      set { _roleNum = value; }
    }

    private int _mapId = default(int);
    [global::ProtoBuf.ProtoMember(5, IsRequired = false, Name=@"mapId", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int mapId
    {
      get { return _mapId; }
      set { _mapId = value; }
    }

    private int _row = default(int);
    [global::ProtoBuf.ProtoMember(6, IsRequired = false, Name=@"row", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int row
    {
      get { return _row; }
      set { _row = value; }
    }

    private int _cell = default(int);
    [global::ProtoBuf.ProtoMember(7, IsRequired = false, Name=@"cell", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int cell
    {
      get { return _cell; }
      set { _cell = value; }
    }

    private int _countdownSecond = default(int);
    [global::ProtoBuf.ProtoMember(8, IsRequired = false, Name=@"countdownSecond", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int countdownSecond
    {
      get { return _countdownSecond; }
      set { _countdownSecond = value; }
    }

    private int _maxRoundNum = default(int);
    [global::ProtoBuf.ProtoMember(9, IsRequired = false, Name=@"maxRoundNum", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int maxRoundNum
    {
      get { return _maxRoundNum; }
      set { _maxRoundNum = value; }
    }

    private int _roundSp = default(int);
    [global::ProtoBuf.ProtoMember(10, IsRequired = false, Name=@"roundSp", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    [global::System.ComponentModel.DefaultValue(default(int))]
    public int roundSp
    {
      get { return _roundSp; }
      set { _roundSp = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}